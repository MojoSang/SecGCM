from oram import OptimalORAM
from Compiler import util
from Compiler import library as lib
from sorting import radix_sort
from Compiler import path_oblivious_heap as poh
'''
edges=OptimalORAM(2000,entry_size=(6,4))
'''
'''
Rch=OptimalORAM(2000,)
Dst=OptimalORAM(2000)
@for_range(2000)
def _(i):
	Rch[sint(i)]=sint(35)
	Dst[sint(i)]=sint(10)

@for_range(1000,1200)
def _(i):
	print_ln('(%s,%s)',Rch[sint(i)].reveal(),Dst[sint(i)].reveal())
'''
'''
@for_range(2000)
def _(i):
	edges[sint(i)]=(sint(35),(10))


@for_range(1000,1200)
def _(i):
	print_ln('(%s,%s)',edges[sint(i)][0].reveal(),edges[sint(i)][1].reveal())
'''
'''
a=sint(3)
b=sint(5)
c=a.max(b)
print_ln('%s',c.reveal())
'''
'''
flag=b.greater_than(a)
c=flag*b+(1-flag)*a
print_ln('%s',c.reveal())
'''
'''
D=sint.Array(5)
D.input_from(0)
E=sint.Array(5)
E.input_from(1)
f=sint(0)
vs=sint(0)
@for_range(5)
def _(i):
	flag=D[i]<9999
	f.update(f+D[i]*flag)
	vs.update(vs+flag)
	
print_ln('%s',f.reveal())
print_ln('%s',vs.reveal())
'''


timer_offset = 1000  # Hopefully run timers in an unused range


def start_fancy_timer(id: int | None = None) -> int:
    global timer_offset
    _id = id if id is not None else timer_offset
    lib.start_timer(_id)
    if id is None:
        timer_offset += 1
    return _id


def stop_fancy_timer(id):
    lib.stop_timer(id)


auv=sint.Array(5)
aux=sfix.Array(5)
auvo=OptimalORAM(5)
auxo=OptimalORAM(5)

aux.input_from(0)
auv.input_from(1)


id=start_fancy_timer(100)

q=poh.UniquePathObliviousHeap(15)
stop_fancy_timer(id)

id=start_fancy_timer(1000)
@for_range(5)
def _(i):
	q.insert(auv[i],aux[i])
stop_fancy_timer(id)


'''
id=start_fancy_timer(2000)
@for_range(5)
def _(i):
	print_ln('%s',q.extract_min().reveal())
stop_fancy_timer(id)

@for_range(10)
def _(i):
	auvo[sint(i)]=auv[i]
	auxo[sint(i)]=aux[i]
radix_sort(auxo,auvo)

print_ln('%s',auv[:].reveal())
print_ln('%s',aux[:].reveal())
'''
'''
a=OptimalORAM(5)
@for_range(5)
def _(i):
	a[sint(i)]=sint(i)
b=sint.Array(5)
b=a
@for_range(5)
def _(i):
	print_ln('%s',b[i].reveal())
'''
'''
def sort(aux,auv,n):
    aux1=sfix.Array(n)
    auv1=sint.Array(n)
    @for_range(n)
    def _(i):
        aux1[i]=aux[sint(i)]
        auv1[i]=auv[sint(i)]
    radix_sort(aux1,auv1)

    return auv1
n=10
auv=sint.Array(n)
aux=sfix.Array(n)
auvo=OptimalORAM(n)
auxo=OptimalORAM(n)
aux.input_from(0)
auv.input_from(1)

@for_range(n)
def _(i):
	auvo[sint(i)]=auv[i]
	auxo[sint(i)]=aux[i]

aa=OptimalORAM(10)
aa=auvo
@for_range(n)
def _(i):
	print_ln('%s',aa[sint(i)].reveal())

res=sort(auxo,auvo,n)

print_ln('%s',res[:].reveal())

@for_range(9,4,-1)
def _(j):
	print_ln('%s',res[j].reveal())

'''
'''
def exp():
	S=OptimalORAM(3)
	@for_range(3)
	def _(j):
		S[sint(j)]=j
	return S,sfix(1.141)

S=OptimalORAM(3)
c=sfix(0)
i=regint(0)
@while_do(lambda:i<3)
def _():
	Sx,cx=exp()
	@for_range(3)
	def _(i):
		S[sint(i)]=Sx[sint(i)]
	c.update(cx)
	@for_range(3)
	def _(j):
		print_ln('%s',S[sint(j)].reveal())
	print_ln('%s',c.reveal())
	i.update(i+1)
	
@for_range(3)
def _(j):
	print_ln('%s',S[sint(j)].reveal())
print_ln('%s',c.reveal())



def exc(S):
	@for_range(3)
	def _(i):
#		S[sint(i)]=S[sint(i)]+1
		S[i]=S[i]+1
	return S



def x(S):
	i=regint(0)
	@while_do(lambda:i<3)
	def _():
		nonlocal S
		S=exc(S)
		
		@for_range(3)
		def _(j):
			print_ln('%s:%s',i,S[sint(j)].reveal())
		
		i.update(i+1)

#S=OptimalORAM(3)
S=sint.Array(3)
x(S)
print_ln('%s',S[:].reveal())

@for_range(3)
def _(i):
	print_ln('%s',S[sint(i)].reveal())
'''
'''	
INF=sint(9999)
d=sint(4)
d_=sint(8)

fs=sint(0)
fs.update((d<INF)*(d_<INF)*d)
print_ln('%s',fs.reveal())
	
'''
'''
def ep(S):
	sx=sint.Array(3)
	sx.assign({1,2,3})
	S.assign(sx)
	return S
			

Sp=sint.Array(3)
Sp[0]=2
Sp[1]=3
Sp[2]=4
print_ln('%s',Sp[:])
#Sp.assign({2,3,4})
Sp=ep(Sp)
print_ln('%s',Sp[:].reveal())
'''
'''
W=OptimalORAM(5)
@for_range(5)
def _(i):
	W[sint(i)]=sint(i)
	
w=W
@for_range(5)
def _(i):
	print_ln('%s',W[sint(i)].reveal())
'''





