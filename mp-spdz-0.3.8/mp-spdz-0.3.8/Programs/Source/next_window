    '''
    :param W: sqrtoram[sint]=sint
    :param w: ORAM length regint
    :param S: Seed set sint
    :param Sn: Seed set size k
    :param V: V_index sintarray
    :param n: Vertex num cint
    :return: W a bigger window ORAM and its length w

    from V add k vertex into W
    w get into 2w
    if |V-W|<k
        add all V-W into W
    thus we need to obtain an order called seed candidates
    it has phi seeds which is decided by user
    to creater this
    we rank all vertex outside the window  considering by
    vertex add in S+ and estimate centrality and then rank
    we get an order of short list
    some seeds

    for v in V-W
        for s in S+
         instead s by v
         compute its max centrality and record v centrality

    then we get v(V-M),maxcen
    matain a w-length shortlist
    if  |shortlist|<w
    add vertex and its maxcen
    once add a vertex into short list
    record the mincen in this shortlist
    if |shortlist|=w
    compare new vertex maxcen and the mincen
        if bigger permute the vertex and its maxcen
        refresh mincen and v
    '''

    # initial short list
    # [n,2]
    # [vi,maxcen(sfix)]
    short_list = cfix.Tensor([34, 2])
    sln = regint(0)

    # traverse the v
    @for_range(n)
    def _(i):
        # find v in V-W
        maxcen =sfix(0)

        @if_(containSQ(W, w, V[i]) == 0)
        def _():
            S_ = sint.Array(34)
            S_.assign(S)

            # traverse S+
            @for_range(Sn)
            def _(j):
                # permute s,v
                S_[j] = V[i]
                # estimate centrality
                estcen = estimate_centrality(S_, Sn, n, M)

                @if_(maxcen.reveal() < estcen)
                def _():
                    # record maxcen according to its v
                    maxcen.update(estcen)

        # get v and its maxcen
        # add directly
        @if_e(sln < w)
        def _():
            short_list[sln][0] = cfix(V[i])
            short_list[sln][1] = maxcen.reveal()
            sln.update(sln + 1)

        # find permute
        @else_
        def _():
            # n point to the v(short_list[n][0]),and the mincen(short_list[n][1])
            n = Min(short_list, sln)
            @if_(maxcen.reveal() > short_list[n][1])
            def _():
                short_list[n][0] = cfix(V[i])
                short_list[n][1] = maxcen.reveal()
        # get short list with sln-length,sln=w

    Wn=SqrtOram(sint.Tensor([2*w,1]))
    @for_range(w)
    def _(i):
        Wn[sint(i)] = W[sint(i)]

    wn = w

    @for_range(sln)
    def _(i):

        Wn[sint(w + i)] = short_list[i][0]
        wn.update(w + 1)

    return Wn, wn
