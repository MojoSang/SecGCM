from oram import OptimalORAM
from dijkstra import dijkstra
import Compiler.library as lib

def start_fancy_timer(id: int | None = None) -> int:
    global timer_offset
    _id = id if id is not None else timer_offset
    lib.start_timer(_id)
    if id is None:
        timer_offset += 1
    return _id


def stop_fancy_timer(id):
    lib.stop_timer(id)





#grapn data visable
n=516 #vertex number
m=1188 #edges number

E=sint.Array(m)
Dst=sint.Array(m)
Idx=sint.Array(n+1)


#get info
E.input_from(0)
Dst.input_from(1)
Idx.input_from(2)


edges=OptimalORAM(m+n,entry_size=(9,4,1))
e_index=OptimalORAM(n)
e_index[0]=0
e=regint(1)
ed=regint(0)
v=regint(0)
flag=regint(0)
@for_range(m)
def _(i):
	flag.update(0)
	#no out edge
	@if_(Idx[v].equal(Idx[v+1]).reveal())
	def _():
		edges[ed]=(v,0,1)
		e_index[v]=ed
		ed.update(ed+1)
		v.update(v+1)
	#the last edge? change flag
	@if_(Idx[v+1].equal(i+1).reveal())
	def _():
		flag.update(1)
		v.update(v+1)
		@if_(e<n)
		def _():
			e_index[e]=i+1
			e.update(e+1)
	edges[ed]=(E[i],Dst[i],flag)
	ed.update(ed+1)
'''	
Rch=OptimalORAM(n*n,entry_size=6)
Dist=OptimalORAM(n*n,entry_size=4)
Ind=OptimalORAM(n,entry_size=6)
r=regint(0)
'''
id=start_fancy_timer(2000)
res=dijkstra(sint(1),edges,e_index,OptimalORAM)
stop_fancy_timer(id)

'''
@for_range(n)
def _(i):
	#Ind[i]=sint(r)
	res=dijkstra(sint(i),edges,e_index,OptimalORAM)
	
	@for_range(res.size)
	def _(j):
		@if_((res[j][0]!=0).reveal())
		def _():
			Rch[r]=sint(j)
			Dist[r]=res[j][0]
			r.update(r+1)
	
'''	
	
'''
	@for_range(res.size)
	def _(j):
		import util
		print_ln('from %s to %s at cost %s via vertex %s', i.reveal(), j,
		         res[j][0].reveal(), res[j][1].reveal())
'''



'''
@for_range(ed)
def _(i):
	(a,b,c)=edges[i]
	print_ln('(%s,%s,%s)',a.reveal(),b.reveal(),c.reveal())
	

@for_range(n)
def _(i):
	print_ln('%s',e_index[i].reveal())

'''
'''
@for_range(r)
def _(i):
	print_ln('%s:%s',Rch[i].reveal(),Dist[i].reveal())

@for_range(n)
def _(i):
	print_ln('%s',Ind[i].reveal())
'''


