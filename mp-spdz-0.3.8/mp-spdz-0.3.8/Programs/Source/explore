 # W sqrtoram[sint]=sint
    # k regint
    # S_ sint.Array
    # n S_ length
    # i  regint
    # f_ regint
    # D_ Tensor[Dn,2] Dn:|Vs|
    # Dn |Vs|
    # w |W|
    # c_p sfix
    # M pairs shortest distance
    S_n = regint(n.reveal())
    S_p = sint.Array(k)
    c_max=sfix(c_p)

    @if_e(S_n == k)
    def _():
        # c'
        c_ = cS(D_n, f_, k, vn)

        @if_(c_ > c_p)
        def _():
            S_p.assign(S_)
            c_max.update(c_)

    @else_
    def _():
        del_up = regint(0)
        del_low = regint(999)
        j = w

        @while_do(lambda: j > i)
        def _():
            @if_(k - S_n == 1)
            def _():
                @if_(j <= w)
                def _():
                    break_loop()

            S = S_
            # vj=W[j]  ??
            S[S_n] = W[sint(j)]
            Sn = S_n + 1

            f, D, Dn, fs_ = delt_mssp(S, Sn, S_, S_n, f_, D_, D_n, M)
            alpha = regint(k - Sn)
            V_ = sint.Array(W - j)
            V_n = sint(0)

            @for_range(j + 1, w)
            def _(x):
                V_[V_n.reveal()] = W[sint(x)]
                V_n.update(V_n+1)

            @if_(V_n.greater_equal(alpha).reveal())
            def _():
                @if_(V_n.equal(0).bit_or(cS(Dn + alpha * del_up, f_ + alpha * del_low, k, n) > c_p))
                def _():
                    S_p,c_max=explore(W, k, S, Sn, j + 1, f, D, Dn, w, c_p, M)

            del_up.update(max(Dn - D_n, del_up))
            del_low.update(min(fs_ - f_, del_low))

    return S_p, c_max
