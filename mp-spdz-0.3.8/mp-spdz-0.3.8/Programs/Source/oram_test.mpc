from oram import OptimalORAM
import Compiler.library as lib
INF=sint(9999)

#S D Rch Dst Ind
def centrality(V_S,f,V,k):
    '''
        compute the group closeness centrality
    '''
    a=sfix(0)
    b=sfix(0)
    a.update((V_S-k)/f)
    b.update((V_S-k)/(V-3))
    return a.mul(b)

def rdsum(S,n,Rch,Dst,Ind,V):
	D=sint.Array(V)
	farness=sint(0)
	V_s=sint(0)
	pos=regint(Ind[S[0].reveal()].reveal())
	i=regint(0)
	@for_range(V)
	def _(i):
		D[i]=INF
	@while_do(lambda:i<n)
	def _():
		@if_e(pos==Ind[S[i].reveal()+1].reveal())
		def _():
			print_ln('pos end')
			i.update(i+1)
			@if_(i<n)
			def _():
				pos.update(Ind[S[i].reveal()].reveal())
		@else_
		def _():
			rp=Rch[pos].reveal()
			dp=Dst[pos].reveal()
			dp_=D[rp]
			sp=dp_.min(dp)
			D[rp]=sp
			pos.update(pos+1)
	@for_range(V)
	def _(i):
		flag=D[i]<INF
		farness.update(farness +flag*D[i])
		V_s.update(V_s+flag)
	return farness,D,V_s

def d_rdsum(S,D_,Rch,Dst,Ind,V):
    V_s=sint(0)
    fs=sint(0)
    Fs,D,VS=rdsum(S,2,Rch,Dst,Ind,V)
    @for_range(V)
    def _(i):
        d_=D_[i]
        d=D[i]
        fs.update(fs+(d_<INF)*(d<INF)*d)
    return Fs,D,VS,fs

def explore(W,wn,Rch,Dst,Ind,w,V,Sp,cp):
    S=sint.Array(3)
    @for_range_opt(wn-2)
    def _(i):
        S[0]=sint(i)
        print_ln('S[0]:%s',i)
        f,D,Vs=rdsum(S,1,Rch,Dst,Ind,V)
        del_up=sint(0)
        del_down=INF
        @for_range_opt(wn-1,w,-1)
        def _(j):
            S[1]=sint(j)
            print_ln('S[1]:%s',j)
            f_,D_,Vs_,fs_=d_rdsum(S,D,Rch,Dst,Ind,V)
            c_up=centrality(Vs_+del_up,fs_+del_down,V,3)
            @if_((c_up>cp).reveal())
            def _():
                @for_range_opt(wn,j,-1)
                def _(l):
                    S[2]=sint(l)
                    f__,D__,Vs__=rdsum(S,3,Rch,Dst,Ind,V)
                    c_=centrality(Vs__,f__,V,3)
                    @if_((c_>cp).reveal())
                    def _():
                        Sp.assign(S)
                        cp.update(c_)
            del_up.update(del_up.max(Vs_-Vs))
            del_down.update(del_down.min(fs_-f))
    return Sp,cp


def start_fancy_timer(id: int | None = None) -> int:
    global timer_offset
    _id = id if id is not None else timer_offset
    lib.start_timer(_id)
    if id is None:
        timer_offset += 1
    return _id


def stop_fancy_timer(id):
    lib.stop_timer(id)


#grapn data visable
V=516 #vertex number
m=54036 #reachable number
Rch=sint.Array(m)
Dst=sint.Array(m)
Ind=sint.Array(V+1)
Rch.input_from(0)
Dst.input_from(1)
Ind.input_from(2)

W=sint.Array(32)
Sp=sint.Array(3)
Sp.assign({145,31,98})
W.assign({145, 80, 67, 109, 199, 43, 93, 91, 151, 158, 43, 118, 25, 177, 167, 56, 172, 29, 139, 169, 114, 31, 138, 98, 163, 159, 19, 36, 131, 82, 53, 102,})
id=start_fancy_timer(2000)
#f,D,v=rdsum(Sp,3,Rch,Dst,Ind,V)
Sp,cp=explore(W,32,Rch,Dst,Ind,16,V,Sp,sfix(0))

stop_fancy_timer(id)
print_ln('Sp:%s,cp:%s',Sp[:].reveal(),cp.reveal())



