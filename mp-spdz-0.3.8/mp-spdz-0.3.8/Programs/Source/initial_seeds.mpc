from Compiler.types import *
from oram import OptimalORAM
from Compiler.mo_utils1 import *
print_ln("get")
'''
#a got p0 edges
a=sint.Tensor([78,3])
a.input_from(0)
#b got p1 edges
b=sint.Tensor([58,3])
b.input_from(1)

M,V_index,n=djk_GetM(a,b)
'''
n=sint(392)
M=sint.Matrix(517,517)
V_index=sint.Array(392)
M.input_from(0)
V_index.input_from(1)
Score=cfix.Array(517)
#compute each vertex centrality
@for_range(n.reveal()-1)
def _(i):
	Score[V_index[i].reveal()]=centrality(V_index[i].reveal(),n,M)

print_ln('Score finish')
#set seed set
k=regint(3)
S=sint.Array(3)
#note instance number
Sn=regint(0)

@while_do(lambda:Sn<k)
def _():
	v=argmax(V_index,n,S,Sn,Score)
	S[Sn]=v
	Sn.update(Sn+1)
	print_ln('Sn:%s',Sn)
	@for_range(n.reveal())
	def _(i):
		u=V_index[i].reveal()
		#u in V but S
		@if_(contain(S,Sn,u)==0)
		def _():
			@for_range(n.reveal())
			def _(j):
				w=V_index[j].reveal()
				@if_(M[u][w].greater_than(M[v][w]).reveal())
				def _():
					M[u][w].update(M[v][w])
			S1=sint.Array(len(S)+1)
			S1.assign(S)
			S1[Sn]=u
			S1n=regint(Sn+1)
			Score[u]=centralityS(S1,S1n,n,M)
			

print_ln('S:%s',S[:].reveal())

f,D,dn=mssp(S,k,M,516)
cen=c(dn,f,k)

print_ln('centrality:%s',cen)


		
		
		
		
		
		
		
		
		
