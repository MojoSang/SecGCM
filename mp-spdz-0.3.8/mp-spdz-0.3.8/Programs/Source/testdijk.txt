from Compiler.types import *
from Compiler.GG.tt import *
from Compiler.util import *
from builtins import *
from Compiler.test import dijkstra
from oram import OptimalORAM
from SecESTO import *

n=33
m=136
edges=OptimalORAM(m,entry_size=(6,8,1))# 每条边存储 (u, v, w)

E=sint.Array(m)
Dst=sint.Array(m)
Idx=sint.Array(n+1)

E.input_from(0)
Dst.input_from(1)
Idx.input_from(2)

v=regint(0)
i=regint(0)
@while_do(lambda:i<m)
def _():
	@if_e(Idx[v+1].equal(i).reveal())
	def _():
		v.update(v+1)
	@else_
	def _():
		x=v
		y=E[i]-1
		d=Dst[i]
		edges[i]=(x,y,d)
		i.update(i+1)

'''
for i in range(m):
	(a,b,c)=edges[i]
	print_ln('(%s,%s,%s)',a.reveal(),b.reveal(),c.reveal())
'''

'''
# 假设输入图的边及权重（起点，终点，权重），这里用常量填充用于示例
edges[0] = (sint(0), sint(1), sint(1))  # 0 -> 1, weight 2
edges[1] = (sint(0), sint(3), sint(1))  # 0 -> 2, weight 4
edges[2] = (sint(0), sint(4), sint(1))  # 1 -> 2, weight 1
edges[3] = (sint(1), sint(4), sint(1))  # 1 -> 3, weight 7
edges[4] = (sint(2), sint(3), sint(1))  # 2 -> 4, weight 3
edges[5] = (sint(4), sint(2), sint(1))  # 3 -> 4, weight 1
'''

# 允许用户通过参数指定源点
source = 0  # 在此处可以指定源点，比如将源点设为节点1

Rch=sint.Array(n*n)
Dst=sint.Array(n*n)
Ind=sint.Array(n+1)
'''
Rch=OptimalORAM(n*n)
Dst=OptimalORAM(n*n)
Ind=OptimalORAM(n+1)
'''
k=sint(0)
Ind[0]=sint(0)
ind=regint(1)
# 调用Dijkstra算法
for j in range(n):
	shortest_paths = dijkstra(n, m, edges,j)

	for i in range(n):
		@if_((shortest_paths[i]!=999999).bit_and(shortest_paths[i]!=0).reveal())
		def _():
			Rch[k.reveal()]=i
			Dst[k.reveal()]=shortest_paths[i]
			k.update(k+1)
	Ind[ind]=k
	ind.update(ind+1)

	# 输出每个节点的最短路径
	for a in range(n):
		print_ln("Shortest path from node %s to node %s: %s", j, a, shortest_paths[a].reveal())


print_ln('Rch:')
@for_range(n*n)
def _(i):
	print_ln('%s',Rch[i].reveal())

print_ln('Dst:')
@for_range(n*n)
def _(i):
	print_ln('%s',Dst[i].reveal())

print_ln('Ind:')
@for_range(n+1)
def _(i):
	print_ln('%s',Ind[i].reveal())

'''
s=OptimalORAM(3)
s[sint(0)]=sint(0)
s[sint(1)]=sint(1)
s[sint(2)]=sint(3)
f,D=mssp(s,Rch,Dst,Ind,n)
print_ln('farness:%s',f.reveal())

'''
'''
@for_range(1,n+1)
def _(i):
	print_ln('%s',D[sint(i)].reveal())
'''





